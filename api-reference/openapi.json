{
  "openapi": "3.0.1",
  "info": {
    "title": "Jethings API",
    "description": "Complete API for Jethings application including authentication, store management, and app configuration",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://jethings-backend.fly.dev",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "summary": "Sign Up",
        "description": "Create a new user account",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid payload or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Email or phone number already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify-email": {
      "post": {
        "summary": "Verify Email",
        "description": "Verify user email with OTP",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or expired OTP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "summary": "Sign In",
        "description": "Authenticate user and return tokens",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign in successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignInResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials or email not verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/auth/request-password-reset": {
      "post": {
        "summary": "Request Password Reset",
        "description": "Request password reset OTP",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset request processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify-password-reset": {
      "post": {
        "summary": "Verify Password Reset",
        "description": "Reset password with OTP",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPasswordResetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or expired OTP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh-token": {
      "post": {
        "summary": "Refresh Token",
        "description": "Refresh access token using refresh token",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/auth/revoke-token": {
      "post": {
        "summary": "Revoke Token",
        "description": "Revoke a specific refresh token",
        "tags": ["Authentication"],
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token revoked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/auth/revoke-all-tokens": {
      "post": {
        "summary": "Revoke All Tokens",
        "description": "Revoke all refresh tokens for the authenticated user",
        "tags": ["Authentication"],
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "All tokens revoked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logout",
        "description": "Logout user from all devices (alias for revoke-all-tokens)",
        "tags": ["Authentication"],
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/stores": {
      "post": {
        "summary": "Create Store",
        "description": "Create a new store",
        "tags": ["Stores"],
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStoreRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Store created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get All Stores (Admin Only)",
        "description": "Get all stores with filtering and pagination",
        "tags": ["Stores"],
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search across name and description",
            "schema": {"type": "string"}
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "array",
              "items": {"type": "string", "enum": ["pending", "rejected", "accepted"]}
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {"type": "integer", "default": 1}
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {"type": "integer", "default": 10}
          }
        ],
        "responses": {
          "200": {
            "description": "Stores retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoresResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stores/my": {
      "get": {
        "summary": "Get User's Stores",
        "description": "Get current user's stores with filtering and pagination",
        "tags": ["Stores"],
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search across name and description",
            "schema": {"type": "string"}
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "array",
              "items": {"type": "string", "enum": ["pending", "rejected", "accepted"]}
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {"type": "integer", "default": 1}
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {"type": "integer", "default": 10}
          }
        ],
        "responses": {
          "200": {
            "description": "User's stores retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoresResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stores/{id}": {
      "get": {
        "summary": "Get Store by ID",
        "description": "Get a specific store by its ID",
        "tags": ["Stores"],
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Store ID",
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "200": {
            "description": "Store retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "404": {
            "description": "Store not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Store (Admin Only)",
        "description": "Update a store (admin can update all fields)",
        "tags": ["Stores"],
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Store ID",
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStoreRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Store updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "404": {
            "description": "Store not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Store (Admin Only)",
        "description": "Delete a store (soft delete)",
        "tags": ["Stores"],
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Store ID",
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "200": {
            "description": "Store deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "404": {
            "description": "Store not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/stores/{id}/user": {
      "put": {
        "summary": "Update Store (User)",
        "description": "Update a store (user can only update name, description, icon)",
        "tags": ["Stores"],
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Store ID",
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStoreUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Store updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "404": {
            "description": "Store not found or no permission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/app-config/public": {
      "get": {
        "summary": "Get Public App Configuration",
        "description": "Get public app configuration (no authentication required)",
        "tags": ["App Configuration"],
        "responses": {
          "200": {
            "description": "App configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicAppConfig"
                }
              }
            }
          }
        }
      }
    },
    "/app-config": {
      "get": {
        "summary": "Get All App Configurations (Admin Only)",
        "description": "Get all app configurations",
        "tags": ["App Configuration"],
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "App configurations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppConfig"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create App Configuration (Admin Only)",
        "description": "Create a new app configuration",
        "tags": ["App Configuration"],
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "App configuration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppConfig"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/app-config/{id}": {
      "get": {
        "summary": "Get App Configuration by ID (Admin Only)",
        "description": "Get a specific app configuration by ID",
        "tags": ["App Configuration"],
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Configuration ID",
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "200": {
            "description": "App configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppConfig"
                }
              }
            }
          },
          "404": {
            "description": "Configuration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update App Configuration (Admin Only)",
        "description": "Update an app configuration",
        "tags": ["App Configuration"],
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Configuration ID",
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAppConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "App configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppConfig"
                }
              }
            }
          },
          "404": {
            "description": "Configuration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete App Configuration (Admin Only)",
        "description": "Delete an app configuration",
        "tags": ["App Configuration"],
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Configuration ID",
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "200": {
            "description": "App configuration deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "404": {
            "description": "Configuration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/app-config/active": {
      "put": {
        "summary": "Create or Update Active Configuration (Admin Only)",
        "description": "Create or update the active app configuration",
        "tags": ["App Configuration"],
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Active configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppConfig"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SignUpRequest": {
        "type": "object",
        "required": ["firstName", "lastName", "email", "phoneNumber", "password", "age"],
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User's first name"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Valid email address"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Valid phone number format"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "description": "Minimum 6 characters"
          },
          "age": {
            "type": "integer",
            "minimum": 1,
            "maximum": 120,
            "description": "Integer between 1-120"
          },
          "description": {
            "type": "string",
            "description": "Optional user description/bio"
          }
        }
      },
      "VerifyEmailRequest": {
        "type": "object",
        "required": ["otp"],
        "properties": {
          "otp": {
            "type": "string",
            "pattern": "^[0-9]{6}$",
            "description": "6-digit OTP code"
          }
        }
      },
      "SignInRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          }
        }
      },
      "PasswordResetRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          }
        }
      },
      "VerifyPasswordResetRequest": {
        "type": "object",
        "required": ["otp", "newPassword"],
        "properties": {
          "otp": {
            "type": "string",
            "pattern": "^[0-9]{6}$",
            "description": "6-digit OTP code"
          },
          "newPassword": {
            "type": "string",
            "minLength": 6,
            "description": "New password (minimum 6 characters)"
          }
        }
      },
      "RefreshTokenRequest": {
        "type": "object",
        "required": ["refreshToken"],
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Valid refresh token"
          }
        }
      },
      "RevokeTokenRequest": {
        "type": "object",
        "required": ["refreshToken"],
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Refresh token to revoke"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User's unique identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "firstName": {
            "type": "string",
            "description": "User's first name"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User's roles"
          }
        }
      },
      "SignInResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "accessToken": {
            "type": "string",
            "description": "JWT access token"
          },
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token"
          },
          "expiresIn": {
            "type": "integer",
            "description": "Access token expiration time in seconds"
          }
        }
      },
      "RefreshTokenResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "accessToken": {
            "type": "string",
            "description": "New JWT access token"
          },
          "refreshToken": {
            "type": "string",
            "description": "New JWT refresh token"
          },
          "expiresIn": {
            "type": "integer",
            "description": "Access token expiration time in seconds"
          }
        }
      },
      "SuccessMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          }
        }
      },
      "ErrorMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "CreateStoreRequest": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Store name (can be duplicated)"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "Store description"
          },
          "icon": {
            "type": "string",
            "maxLength": 500,
            "description": "Store icon URL"
          }
        }
      },
      "UpdateStoreRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Store name (can be duplicated)"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "Store description"
          },
          "icon": {
            "type": "string",
            "maxLength": 500,
            "description": "Store icon URL"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "rejected", "accepted"],
            "description": "Store status"
          },
          "isActive": {
            "type": "boolean",
            "description": "Store active status"
          }
        }
      },
      "UpdateStoreUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Store name (can be duplicated)"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "Store description"
          },
          "icon": {
            "type": "string",
            "maxLength": 500,
            "description": "Store icon URL"
          }
        }
      },
      "Store": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Store ID"
          },
          "userId": {
            "type": "string",
            "description": "User ID who owns the store"
          },
          "name": {
            "type": "string",
            "description": "Store name"
          },
          "description": {
            "type": "string",
            "description": "Store description"
          },
          "icon": {
            "type": "string",
            "description": "Store icon URL"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "rejected", "accepted"],
            "description": "Store status"
          },
          "isActive": {
            "type": "boolean",
            "description": "Store active status"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Deletion timestamp"
          }
        }
      },
      "StoresResponse": {
        "type": "object",
        "properties": {
          "stores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Store"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number"
          },
          "limit": {
            "type": "integer",
            "description": "Items per page"
          },
          "total": {
            "type": "integer",
            "description": "Total number of items"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages"
          },
          "hasNext": {
            "type": "boolean",
            "description": "Whether there is a next page"
          },
          "hasPrev": {
            "type": "boolean",
            "description": "Whether there is a previous page"
          }
        }
      },
      "CreateAppConfigRequest": {
        "type": "object",
        "required": ["minVersion", "currentVersion"],
        "properties": {
          "minVersion": {
            "type": "string",
            "description": "Minimum supported app version"
          },
          "currentVersion": {
            "type": "string",
            "description": "Current app version"
          },
          "releaseNotes": {
            "type": "string",
            "description": "Release notes for the version"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether this config is active"
          }
        }
      },
      "UpdateAppConfigRequest": {
        "type": "object",
        "properties": {
          "minVersion": {
            "type": "string",
            "description": "Minimum supported app version"
          },
          "currentVersion": {
            "type": "string",
            "description": "Current app version"
          },
          "releaseNotes": {
            "type": "string",
            "description": "Release notes for the version"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether this config is active"
          }
        }
      },
      "AppConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Configuration ID"
          },
          "minVersion": {
            "type": "string",
            "description": "Minimum supported app version"
          },
          "currentVersion": {
            "type": "string",
            "description": "Current app version"
          },
          "releaseNotes": {
            "type": "string",
            "nullable": true,
            "description": "Release notes for the version"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether this config is active"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "PublicAppConfig": {
        "type": "object",
        "properties": {
          "minVersion": {
            "type": "string",
            "description": "Minimum supported app version"
          },
          "currentVersion": {
            "type": "string",
            "description": "Current app version"
          },
          "releaseNotes": {
            "type": "string",
            "nullable": true,
            "description": "Release notes for the version"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}